apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: counters-cd
spec:
  params:
    - name: repo-url
      type: string
      description: Git repository to clone
    - name: repo-revision
      type: string
      default: main
    - name: app-name
      type: string
      default: counters-api
    - name: build-image
      type: string
      description: Full image reference to build & push (e.g., image-registry.openshift-image-registry.svc:5000/<ns>/counters-api:latest)
    - name: context-dir
      type: string
      default: .
  workspaces:
    - name: output

  tasks:
    # 1) cleanup (your Task)
    - name: cleanup
      taskRef:
        name: cleanup
      workspaces:
        - name: source
          workspace: output

    # 2) git clone (ClusterTask provided by the lab/cluster)
    - name: git-clone
      runAfter: [cleanup]
      taskRef:
        kind: ClusterTask
        name: git-clone
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.repo-revision)
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: output

    # 3) flake8 linting (inline taskSpec using python:3.9-slim)
    - name: flake8-lint
      runAfter: [git-clone]
      taskSpec:
        workspaces:
          - name: source
        steps:
          - name: lint
            image: python:3.9-slim
            workingDir: $(workspaces.source.path)
            script: |-
              #!/bin/bash
              set -e
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              pip install flake8
              flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
              flake8 service --count --max-complexity=10 --max-line-length=127 --statistics
      workspaces:
        - name: source
          workspace: output

    # 4) nose tests (your Task)
    - name: nose-tests
      runAfter: [flake8-lint]
      taskRef:
        name: nose
      params:
        - name: args
          value: "-v --with-spec --spec-color --with-coverage --cover-package=app"
      workspaces:
        - name: source
          workspace: output

    # 5) buildah build (ClusterTask)
    - name: build-image
      runAfter: [nose-tests]
      taskRef:
        kind: ClusterTask
        name: buildah
      params:
        - name: IMAGE
          value: $(params.build-image)
        - name: CONTEXT
          value: $(params.context-dir)
        - name: FORMAT
          value: docker
        # Optional flags; keep defaults unless lab requires otherwise:
        # - name: TLSVERIFY
        #   value: "false"
      workspaces:
        - name: source
          workspace: output

    # 6) oc deploy (OpenShift client ClusterTask)
    - name: oc-deploy
      runAfter: [build-image]
      taskRef:
        kind: ClusterTask
        name: openshift-client
      params:
        - name: SCRIPT
          value: |
            set -e
            echo "Deploying $(params.app-name) using image $(params.build-image) ..."
            oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -
            # optional: expose via service/route if not present
            if ! oc get svc $(params.app-name) >/dev/null 2>&1; then
              oc expose deployment/$(params.app-name) --port=8080
            fi
            if oc api-resources | grep -q route.route.openshift.io; then
              if ! oc get route $(params.app-name) >/dev/null 2>&1; then
                oc expose svc/$(params.app-name)
              fi
            fi
      workspaces:
        - name: manifest-dir
          workspace: output
